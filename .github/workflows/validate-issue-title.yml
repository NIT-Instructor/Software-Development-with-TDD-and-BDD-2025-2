name: Validate Issue Title

"on":
  issues:
    types: [opened, edited, reopened]

jobs:
  validate-title:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Validate Issue Title Format
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title;

            // Regex patterns:
            // Regular teams: <Team Name> - User Story <us num>: Title of user story
            // Admin team: admin - title of issue
            // Only allowed team names: kent, fowler, farley, deming, admin (case-insensitive)
            // User story numbers can be integers or decimals (e.g., 1, 2.3, 10.15)
            // All parts of the title are case-insensitive
            const regularTeamPattern = /^(kent|fowler|farley|deming)\s*-\s*user\s+story\s+\d+(\.\d+)?\s*:\s*.+$/i;
            const adminPattern = /^admin\s*-\s*.+$/i;
            const isValid = regularTeamPattern.test(title) || adminPattern.test(title);

            if (!isValid) {
              // Add a comment explaining the issue
              const comment = `⚠️ **Invalid Issue Title Format**

            The issue title does not match the required format.

            **Required formats:**

            For regular teams:
            \`<Team Name> - User Story <us num>: Title of user story\`

            For admin team:
            \`admin - title of issue\`

            **Allowed team names:** kent, fowler, farley, deming, admin

            **Examples:**
            - \`kent - User Story 1: Implement login feature\`
            - \`fowler - User Story 42: Add API endpoint for user registration\`
            - \`farley - User Story 5: Create responsive navigation menu\`
            - \`deming - User Story 12: Fix temperature calculation bug\`
            - \`admin - Update repository settings\`
            - \`admin - Create new workflow for CI/CD\`

            **Current title:**
            \`${title}\`

            Please update the issue title to match the required format.`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: comment
              });
              
              // Add a label to indicate invalid title
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['invalid-title']
              });
              
              core.setFailed('Issue title does not match the required format');
            } else {
              // Remove the invalid-title label if it exists
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'invalid-title'
                });
              } catch (error) {
                // Label might not exist, ignore the error
              }
              
              console.log('✅ Issue title is valid');
            }
